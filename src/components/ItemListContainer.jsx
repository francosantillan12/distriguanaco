// src/components/ItemListContainer.jsx
import { useState, useEffect } from "react";
import { useParams } from "react-router-dom";      // ðŸ‘ˆ 1) Leemos :categoriaId de la URL
import ItemList from "./ItemList";
import withLoading from "./hoc/withLoading";       // ðŸ‘ˆ sigue igual, sin llaves

const ItemListWithLoading = withLoading(ItemList);

function ItemListContainer({ mensaje = "" }) {
  const { categoriaId } = useParams();             // ðŸ‘ˆ 2) Obtenemos el parÃ¡metro dinÃ¡mico
  const [items, setItems] = useState([]);
  const [error, setError] = useState(null);        // ðŸ‘ˆ 3) Guardamos errores (opcional, recomendado)

  useEffect(() => {
    setError(null);                                 // ðŸ‘ˆ 4) Limpiamos error al cambiar de categorÃ­a
    // ðŸ‘‡ 5) Armamos la URL segÃºn haya o no categorÃ­a
    const url = categoriaId
      ? `https://dummyjson.com/products/category/${categoriaId}`
      : `https://dummyjson.com/products`;


    fetch(url)
      .then((res) => {
        if (!res.ok) throw new Error("Fallo la carga de productos");
        return res.json();
      })
      .then((data) => {
        // ðŸ‘‡ 6) DummyJSON devuelve { products, total, ... } en ambas rutas
        const productos = Array.isArray(data.products) ? data.products : [];
        // PequeÃ±o delay de demo para que se vea el loader (podÃ©s bajarlo/quitarlos si querÃ©s)
        setTimeout(() => {
          setItems(productos);
        }, 800);
      })
      .catch((err) => {
        console.error("Error al traer productos:", err);
        setItems([]);                                // ðŸ‘ˆ Evitamos quedar con datos viejos
        setError("No se pudieron cargar los productos.");
      });
  }, [categoriaId]);                                 // ðŸ‘ˆ 7) DEPENDE de la categorÃ­a

  // ðŸ‘‡ 8) Pasamos items y mensaje; el HOC muestra loader si items.length === 0
  //    (Si tu HOC acepta 'cargando', avisame y lo pasamos como prop explÃ­cito)
  return (
    <>
      {error ? <p className="text-danger">{error}</p> : null}
      <ItemListWithLoading items={items} mensaje={mensaje} />
    </>
  );
}

export default ItemListContainer;

